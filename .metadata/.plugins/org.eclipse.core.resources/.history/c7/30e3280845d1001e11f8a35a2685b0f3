package com.ayshu.gct.spring.aop.concept.advice;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoggingAspect {

	private final Logger log = LoggerFactory.getLogger(this.getClass());

	@Pointcut("execution(* com.ayshu.gct.spring.aop.concept.*.*.*(..))")
	public void allMethodExec() {
		
	}

	@Before(value="allMethodExec()")
	public void beforeMethodLog(JoinPoint joinPoint) {
		System.out.println("Before method " + joinPoint.getSignature() + ": ");
	}
	
	@After(value="allMethodExec()")
	public void afterMethodLog(JoinPoint joinPoint) {
		System.out.println("After method " + joinPoint.getSignature() + ": ");
	}
}
